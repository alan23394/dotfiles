#!/bin/sh

#
# Alan Barnett
# Uses a partition or mount_point variable to get size information for my bar
# Prints it's use and colors it based on percentage
#

# Handle click event first
[ "$BLOCK_BUTTON" == "1" ] && \
	notify-send "$(df -h --output=source,avail,size,pcent)"

# Will accept one of variables partition or mount_point
# partition is the "filesystem" column of df, i.e. /dev/sda3
# mount_point is the "mounted on" column of df, i.e. /
# If both are provided, mount_point will be used instead.
# Also the variable hide_if_error is set to true, it will exit silently if the
# partition doesn't exist.

# Leave function, which exits silently depending on the hide_if_error variable
function leave()
{
	[ "$hide_if_error" = "true" ] && exit
	echo "$1" && exit
}

# Quit if no partition and no mount_point variable
([ -z "$partition" ] && [ -z "$mount_point" ]) \
	&& leave "Must supply \$partition or \$mount_point"

# Define default color variables, if they aren't already set
# 10 color gradient, red to green, for percentages
[ -z "$colors" ] && \
	colors=("#ff0000" "#ff6600" "#ff9900" "#ffb200" "#ffe600" \
			"#ffff00" "#e6ff00" "#ccff00" "#99ff00" "#80ff00" "#4cff00")

# Make a variable of the df line of our mount point or partition
# Grep for partition because awk was having issues with /'s
if [ -z "$mount_point" ]; then
	partition_info="$(df -h | grep -w "^$partition")"
	[ -z "$partition_info" ] && leave "No partition $partition"
else
	partition_info="$(df -h | grep -w "$mount_point\$")"
	[ -z "$partition_info" ] && leave "No mount point $mount_point"
fi

# Use awk and eval to create variables out of the chunks
eval "$(echo "$partition_info" | awk '{ print "remaining="$4 "; total="$2 "; pcent="$5 }')"

# Set color using pcent variable, without the % at the end
color="${colors[$(( (100 - ${pcent%%\%}) / 10 ))]}"

echo "$remaining ($pcent)"
echo "$remaining"
echo "$color"
